
#+TITLE: Emacs configuration

#+STARTUP: overview

* Auto update packages

#+begin_src emacs-lisp
  (use-package auto-package-update :ensure t)
#+end_src

* Global keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "H-k") 'global-set-key)
#+end_src

** Files

#+begin_src emacs-lisp
  (global-set-key (kbd "H-s") 'save-buffer)
  (global-set-key (kbd "H-S") 'save-some-buffers)

  (global-set-key (kbd "H-f") 'fdx/visit-or-projectile-visit)
  (global-set-key (kbd "H-F") 'ido-find-file)

  (global-set-key (kbd "H-D d") 'fdx/delete-file-and-buffer)
  (global-set-key (kbd "H-D r") 'fdx/rename-current-file)
  (global-set-key (kbd "H-D m") 'fdx/chmod-current-file)
  (global-set-key (kbd "H-D t") 'fdx/touch-current-file)
#+end_src

** Sorting words

#+begin_src emacs-lisp
  (require 's)

  (defun fdx/sort-words-in-region (beg end &optional reversed)
    "In active region sort words alphabetically in ascending order.
  With prefix argument REVERSED use descending order.
  Don't use this function on regions with nested brackets."
    (interactive "r\nP")
    (unless (region-active-p) (user-error "No active region to sort!"))
    (let* ((str (s-trim (buffer-substring-no-properties beg end)))
           (com (string-match-p "," str))
           (cln (replace-regexp-in-string "[\]\[(){}\']+\\|\\.$" "" str))
           (wrd (split-string cln (if com "," " ") t " "))
           (new (s-join (if com ", " " ")
                        (sort wrd (if reversed #'string> #'string<)))))
      (save-excursion
        (goto-char beg)
        (delete-region beg end)
        (when (and (looking-back "[^ ]") (not (s-starts-with? " " str)))
          (insert " "))
        (insert
         (replace-regexp-in-string "[^\]\[(){}\'\.]+" new str)))))
#+end_src
** Lines

#+begin_src emacs-lisp
  (global-set-key (kbd "H--") 'kill-whole-line)

  (global-set-key (kbd "H-d") 'fdx/duplicate-line)

  (global-set-key (kbd "<H-S-up>") 'fdx/move-text-up)
  (global-set-key (kbd "<H-S-down>") 'fdx/move-text-down)

  (global-set-key (kbd "H-l") 'sort-lines)

  (global-set-key (kbd "H-j") (lambda ()
                                (interactive)
                                (join-line -1)))
#+end_src

** Bookmarks

#+begin_src emacs-lisp
  (global-set-key (kbd "H-0") 'bookmark-jump)
  (global-set-key (kbd "H-)") 'bookmark-set)
#+end_src

** Reloading config

#+begin_src emacs-lisp
  (defun fdx/reload-emacs-configuration ()
    "Reload emacs configuration"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/Readme.org")))

  (global-set-key (kbd "<H-f12>") 'fdx/reload-emacs-configuration)

  (global-set-key (kbd "<H-S-f12>") 'package-refresh-contents)
#+end_src

* Configurations

** Buffer

Auto revert buffers

#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

Reload file with =<f5>=

#+begin_src emacs-lisp
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+end_src

** Word and line wrap

#+begin_src emacs-lisp
  (global-visual-line-mode t)
  (setq-default truncate-lines nil)
  (setq-default toggle-truncate-lines nil)
  (setq-default word-wrap t)
#+end_src

* Interface tweaks

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (blink-cursor-mode 0)
  (show-paren-mode)
  (setq ring-bell-function 'ignore)
#+end_src

* Appearance
** Font

#+begin_src emacs-lisp
  ;; Set default font
  (set-face-attribute 'default nil :family "JetBrains Mono" :height 125)
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono 12"))

#+end_src

** Doom

#+begin_src emacs-lisp
  (use-package doom-themes :ensure t)
#+end_src

** Load theme

#+begin_src emacs-lisp
  (load-theme 'doom-ir-black t)
#+end_src

* Try

#+begin_src emacs-lisp
  (use-package try :ensure t)
#+end_src

* Which key

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+end_src

* Evil Mode

#+begin_src emacs-lisp
  (use-package evil :ensure t)
#+end_src

** Add keybinding

#+begin_src emacs-lisp
  (global-set-key (kbd "<f9>") 'evil-mode)
#+end_src

* Snippets

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (progn
      (setq yas-snippet-dirs
            (list (expand-file-name "~/.emacs.d/fdx/snippets")))
      (yas-global-mode 1)
      ))

  (require 'yasnippet)
#+end_src

** Recompile snippets

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/recompile-snippets ()
    (interactive)
    (shell-command
     (concat "rm -rf "
             user-emacs-directory
             "fdx/snippets/**/.yas-compiled-snippets.el*"))
    (yas/recompile-all)
    (yas/reload-all))
#+end_src

** Some keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "S-<f7>") 'fdx/recompile-snippets)
  (global-set-key (kbd "<backtab>") 'yas-expand-from-trigger-key)
  (global-set-key (kbd "C-<tab>") 'yas-insert-snippet)
#+end_src

* Backup files

Save backup files in it's own directory

#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.emacs.d/backup-files")))
#+end_src

Set backup by copying

#+begin_src emacs-lisp
  (setq backup-by-copying t)
#+end_src

Configure how much to backup

#+begin_src emacs-lisp
  (setq delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
#+end_src

* Indentation

** Reindending whole buffer

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/reindent-buffer ()
    "Indent the current buffer."
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max))
    (untabify (point-min) (point-max)))
#+end_src

*** Global keybinding

#+begin_src emacs-lisp
  (global-set-key (kbd "H-=") 'fdx/reindent-buffer)
#+end_src

* Windows

** Global keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "H-<left>")  'windmove-left)
  (global-set-key (kbd "H-<right>") 'windmove-right)
  (global-set-key (kbd "H-<up>")    'windmove-up)
  (global-set-key (kbd "H-<down>")  'windmove-down)

  (global-set-key (kbd "H-w") 'balance-windows)
#+end_src

** Winner mode

Navigate window configuration history

#+begin_src emacs-lisp
  (winner-mode 1)
#+end_src

** Set default indentation level

#+begin_src emacs-lisp
  (setq         indent-tabs-mode nil) ; And force use of spaces
  (setq-default indent-tabs-mode nil)

  (setq c-basic-offset          2) ; indents 2 chars
  (setq tab-width               2) ; and 2 char wide for TAB

  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)

  (setq css-indent-offset       2)
  (setq js-indent-level         2)
  (setq coffee-tab-width        2)
  (setq typescript-indent-level 2)
#+end_src

** Align regex

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c i") 'align-regexp)
#+end_src

** Cleanup whitespace mode

#+begin_src emacs-lisp
  (use-package whitespace-cleanup-mode :ensure t)
#+end_src

** Split vertically by default

#+begin_src emacs-lisp
  (setq split-height-threshold nil)
  (setq split-width-threshold 0)
#+end_src

* Font size customizations

** Increase and decrease font size

#+begin_src emacs-lisp
  (setq fdx/font-size-increment 5)

  ;;;###autoload
  (defun fdx/decrease-font ()
    "Decrease the font for all buffers"
    (interactive)
    (let ((old-face-attribute (face-attribute 'default :height)))
      (set-face-attribute 'default nil :height (+ old-face-attribute fdx/font-size-increment))))

  ;;;###autoload
  (defun fdx/increase-font ()
    "Increase the font for all buffers"
    (interactive)
    (let ((old-face-attribute (face-attribute 'default :height)))
      (set-face-attribute 'default nil :height (- old-face-attribute fdx/font-size-increment))))
#+end_src

** Key Bindings

#+begin_src emacs-lisp
  (global-set-key (kbd "H-]") 'fdx/increase-font)
  (global-set-key (kbd "H-[") 'fdx/decrease-font)
#+end_src

* Git

** Timemachine

#+begin_src emacs-lisp
  (use-package git-timemachine :ensure t)
#+end_src

* Dired

** Open files with "a"

#+begin_src emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+end_src

** Auto refresh dired, but be quiet about it

#+begin_src emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)
#+end_src

** Jump to top and bottom

#+begin_src emacs-lisp
  (defun dired-back-to-top ()
    (interactive)
    (beginning-of-buffer)
    (dired-next-line 1)
    (dired-next-line 1)
    (dired-next-line 1))

  (defun dired-jump-to-bottom ()
    (interactive)
    (end-of-buffer)
    (dired-next-line -1))

  (eval-after-load "dired" '(progn
                              (define-key dired-mode-map
                                          (vector 'remap 'beginning-of-buffer) 'dired-back-to-top)
                              (define-key dired-mode-map
                                          (vector 'remap 'end-of-buffer) 'dired-jump-to-bottom)))

#+end_src

** File ordering

#+begin_src emacs-lisp
  (setq dired-listing-switches "-aBhl  --group-directories-first")
#+end_src

** Dired omit

#+begin_src emacs-lisp
  (setq-default dired-omit-files-p nil) ; Buffer-local variable

  (setq dired-omit-files "^\\.?#\\|^\\.$\\|^\\.[^\\.]")
  ;; (setq dired-omit-mode t) ; Turn on Omit mode.
  (setq dired-omit-verbose nil) ; Turn off Omit mode messages.
#+end_src

** dired-x

#+begin_src emacs-lisp
  (require 'dired-x)
#+end_src

** Hide details

#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode t)))
#+end_src

* Buffers

** Kill other buffers

Kill all buffers except for the current one

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/kill-other-buffers ()
    "Kill all buffers but the current one.
  Don't mess with special buffers."
    (interactive)
    (dolist (buffer (buffer-list))
      (unless (or (eql buffer (current-buffer)) (not (buffer-file-name buffer)))
        (progn
          (kill-buffer buffer)
          ))
      (delete-other-windows)))
#+end_src

*** Bind it to =C-c k=

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c k") 'fdx/kill-other-buffers)
#+end_src

** Switch to scratch buffer

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-w")
                  (lambda ()
                    (interactive)
                    (switch-to-buffer "*scratch*")))
#+end_src

** Reuse buffers

All buffers, try to reuse windows across all frames

[[https://emacs.stackexchange.com/questions/327/how-can-i-block-a-frame-from-being-split][Source]]

#+begin_src emacs-lisp
  (defun fdx/reuse-buffers ()
    (interactive)
    (add-to-list 'display-buffer-alist
                 '(".*". (display-buffer-reuse-window .
                                                      ((reusable-frames . t))))))
#+end_src

** Trailing whitespace

#+begin_src emacs-lisp
  (defun fdx//set-show-trailing-whitespace (value)
    "Set `show-trailing-whitespace` to VALUE in all prog-mode buffers."
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
        (when (derived-mode-p 'prog-mode)
          (setq show-trailing-whitespace value)))))

  (defun fdx/show-trailing-whitespace ()
    "Enable trailing whitespace in prog-mode buffers."
    (interactive)
    (add-hook 'prog-mode-hook #'fdx//enable-trailing-whitespace)
    (fdx//set-show-trailing-whitespace t))

  (defun fdx/hide-trailing-whitespace ()
    "Disable trailing whitespace in prog-mode buffers."
    (interactive)
    (remove-hook 'prog-mode-hook #'fdx//enable-trailing-whitespace)
    (fdx//set-show-trailing-whitespace nil))

  (defun fdx/toggle-show-trailing-whitespace ()
    "Toggle trailing whitespace visibility in prog-mode buffers."
    (interactive)
    (if (member #'fdx//enable-trailing-whitespace prog-mode-hook)
        (fdx/hide-trailing-whitespace)
      (fdx/show-trailing-whitespace)))

  (defun fdx//enable-trailing-whitespace ()
    "Hook function to enable trailing whitespace."
    (setq show-trailing-whitespace t))
#+end_src

* Directories

When finding a file, if the parent directory doesn't exist, create it first

#+begin_src emacs-lisp
  ;; Make directories on the fly
  (defun make-parent-directory ()
    "Make sure the directory of `buffer-file-name' exists."
    (make-directory (file-name-directory buffer-file-name) t))

  (add-hook 'find-file-not-found-functions #'make-parent-directory)
#+end_src

* Move selection up and down

#+begin_src emacs-lisp
  (defun fdx/move-text-internal (arg)
    (cond
     ((and mark-active transient-mark-mode)
      (if (> (point) (mark))
          (exchange-point-and-mark))
      (let ((column (current-column))
            (text (delete-and-extract-region (point) (mark))))
        (forward-line arg)
        (move-to-column column t)
        (set-mark (point))
        (insert text)
        (exchange-point-and-mark)
        (setq deactivate-mark nil)))
     (t
      (let ((column (current-column)))
        (beginning-of-line)
        (when (or (> arg 0) (not (bobp)))
          (forward-line)
          (when (or (< arg 0) (not (eobp)))
            (transpose-lines arg)
            (when (and (eval-when-compile
                         '(and (>= emacs-major-version 24)
                               (>= emacs-minor-version 3)))
                       (< arg 0))
              (forward-line -1)))
          (forward-line -1))
        (move-to-column column t)))))

  (defun fdx/move-text-down (arg)
    "Move region (transient-mark-mode active) or current line
    arg lines down."
    (interactive "*p")
    (fdx/move-text-internal arg))

  (defun fdx/move-text-up (arg)
    "Move region (transient-mark-mode active) or current line
    arg lines up."
    (interactive "*p")
    (fdx/move-text-internal (- arg)))

#+end_src

** Keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "<H-S-up>") 'fdx/move-line-up)
  (global-set-key (kbd "<H-S-down>") 'fdx/move-line-down)
#+end_src

* Counsel

#+begin_src emacs-lisp
  (use-package counsel :ensure t)
#+end_src

** Remove caret

#+begin_src emacs-lisp
  (setq ivy-initial-inputs-alist nil)
#+end_src

** Flex

#+begin_src emacs-lisp
  (setq ivy-re-builders-alist '((swiper . ivy--regex-plus)
                                (t . ivy--regex-fuzzy)))
#+end_src

** Counsel-projectile

#+begin_src emacs-lisp
  (use-package counsel-projectile :ensure t)
#+end_src

* Swiper

#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :bind (
           ("C-s" . swiper)
           ("C-r" . swiper)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           )
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
      ))
#+end_src

* Ivy

#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (require 'ivy))

  (use-package flx
    :ensure t
    :config
    (require 'flx))

  (setq ivy-use-virtual-buffers t)

  ;; intentional space before end of string
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-initial-inputs-alist nil)

  (setq ivy-re-builders-alist
        '((swiper . ivy--regex-plus)
          (t      . ivy--regex-fuzzy)))

  ;; Use C-j for immediate termination with current value
  (define-key ivy-minibuffer-map (kbd "C-j") #'ivy-immediate-done)
  ;; Use RET for continuing completion for that directory
  (define-key ivy-minibuffer-map (kbd "RET") #'ivy-alt-done)

  (ivy-mode 1)
#+end_src

* org-mode

** Blocks

*** Custom block templates

#+begin_src emacs-lisp
  (setq org-structure-template-alist
        '(
          ("-" . "src")
          ("q" . "quote")
          ("v" . "verse")
          ("r" . "src ruby")
          ("l" . "src emacs-lisp")
          ("s" . "src sh")
          ("C" . "comment")
          ("e" . "example")
          ("h" . "export html")
          ("a" . "export ascii")
          ("c" . "center")
          ("E" . "export")
          ))
#+end_src

** Clocking

#+begin_src emacs-lisp
  (setq org-clock-into-drawer "CLOCKING")

  (setq org-duration-format (quote h:mm))
#+end_src

** Org bullets

Pretty bullets for org-mode

#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** Mermaid

#+begin_src emacs-lisp
  (use-package mermaid-mode :ensure t)
  (use-package ob-mermaid :ensure t)
#+end_src

** Org Babel

#+begin_src emacs-lisp
  (require 'org)
  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)

  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  (setq org-src-fontify-natively t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((mermaid . t)
     (ruby . t)
     (emacs-lisp . t)
     (org . t)
     ))
#+end_src

** Pandoc config

*** Export dispatch options for Pandoc

#+begin_src emacs-lisp
  (setq org-pandoc-menu-entry
        '(
          (?h "to html5." org-pandoc-export-to-html5)
          (?H "to html5 and open." org-pandoc-export-to-html5-and-open)
          (?p "to html5-pdf." org-pandoc-export-to-html5-pdf)
          (?P "to html5-pdf and open." org-pandoc-export-to-html5-pdf-and-open)
          (?e "to epub3." org-pandoc-export-to-epub3)
          (?E "to epub3 and open." org-pandoc-export-to-epub3-and-open)
          (?b "to beamer-pdf." org-pandoc-export-to-beamer-pdf)
          (?B "to beamer-pdf and open." org-pandoc-export-to-beamer-pdf-and-open)
          (?4 "to html4 and open." org-pandoc-export-to-html4-and-open)
          (?$ "as html4." org-pandoc-export-as-html4)
          (?j "to json." org-pandoc-export-to-json)
          (?J "to json and open." org-pandoc-export-to-json-and-open)
          (?m "to markdown." org-pandoc-export-to-markdown)
          (?M "to markdown and open." org-pandoc-export-to-markdown-and-open)
          (?l "to latex-pdf and open." org-pandoc-export-to-latex-pdf-and-open)
          (?L "to latex-pdf." org-pandoc-export-to-latex-pdf)
          (?o "to odt." org-pandoc-export-to-odt)
          (?O "to odt and open." org-pandoc-export-to-odt-and-open)
          (?t "to pptx and open." org-pandoc-export-to-pptx-and-open)
          (?T "to pptx." org-pandoc-export-to-pptx)
          (?r "as revealjs." org-pandoc-export-as-revealjs)
          (?R "to revealjs and open." org-pandoc-export-to-revealjs-and-open)
          (?d "to docx." org-pandoc-export-to-docx)
          (?D "to docx and open." org-pandoc-export-to-docx-and-open)
          ))
#+end_src

*** Install pandoc

#+begin_src emacs-lisp
  (use-package ox-pandoc
    :ensure t
    :init
    (with-eval-after-load 'org
      (require 'ox-pandoc)))
#+end_src

** Ruby

** Populate org-mode shots

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/populate-org-shots (ARG)
    "Populate {{{shot(n)}}}* macros on current buffer"
    (interactive "p")
    (save-excursion
      (beginning-of-buffer)
      (kmacro-set-counter 1)
      (while (search-forward "{{{shot(" nil t)
        (kmacro-insert-counter ARG)
        (let ((start (point)))
          (search-forward-regexp "\\(,\.+)\\|)}}}\\)")
          (let ((end (match-beginning 0)))
            (delete-region start end)
            )
          ))))
#+end_src

*** Insert shot and populate

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/insert-and-populate-org-shots ()
    "Insert {{{shot()}}} and repopulate shots on buffer"
    (interactive)
    (insert "{{{shot()}}}")
    (fdx/populate-org-shots t))
#+end_src

** org-roam

Check for environment variable

#+begin_src emacs-lisp
  ;; (if (not (getenv "ORG_ROAM_DIR"))
  ;;     (error "Missing environment variable 'ORG_ROAM_DIR'"))
#+end_src

Installation

#+begin_src emacs-lisp
  (use-package org-roam :ensure t)
#+end_src

Configuration

#+begin_src emacs-lisp
  (setenv "ORG_ROAM_DIR" "/home/fedex/second-brain")
  (setq org-roam-directory (file-truename (getenv "ORG_ROAM_DIR")))
  (org-roam-db-autosync-mode)
#+end_src

*** Keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "H-a a") 'org-roam-node-find)
  (global-set-key (kbd "H-a t") 'org-roam-tag-add)
  (global-set-key (kbd "H-a i") 'org-roam-node-insert)
  (global-set-key (kbd "H-a u") 'org-roam-ui-open)
#+end_src

*** Templates

#+begin_src emacs-lisp
  (setq org-roam-capture-templates '(
                                     ("d" "default" plain "%?"
                                      :target (file+head "${slug}.org"
                                                         "#+title: ${title}\n")
                                      :unnarrowed t)

                                     ("i" "Inbox entry" plain "%?"
                                      :target (file+head "inbox.org" "")
                                      :unnarrowed nil)
                                     ))
#+end_src

*** org-roam-ui

#+begin_src emacs-lisp
  (use-package org-roam-ui :ensure t)
#+end_src

*** Org Agenda

#+begin_src emacs-lisp
  (global-set-key (kbd "H-a g") 'org-agenda)
#+end_src

*** Insert header with todays deadline

#+begin_src sh
  (defun fdx/org-insert-heading-with-todays-deadline ()
   "Insert a new heading at the same level with today's deadline."
   (interactive)
   (org-meta-return) ; Creates a new heading at the same level
   (org-deadline nil ".") ; Sets the deadline to today
  )
#+end_src
* Projectile

#+begin_src emacs-lisp
  (use-package projectile :ensure t)
#+end_src

** Projectile-sensitive commands

*** Find file

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/visit-or-projectile-visit (&optional a b)
    (interactive)
    (if (projectile-project-p)
        (call-interactively #'counsel-projectile-find-file)
      (call-interactively #'counsel-find-file)))
#+end_src

*** ag

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/ag-or-projectile-ag (&optional a b)
    (interactive)
    (if (projectile-project-p)
        (call-interactively #'projectile-ag)
      (call-interactively #'ag)))
#+end_src

* Searching

** Keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "H-g") 'projectile-ripgrep)
  (global-set-key (kbd "H-G") 'ag)
#+end_src

** Silversearcher ag

#+begin_src emacs-lisp
  (use-package ag :ensure t)
#+end_src

*** Reuse buffer

#+begin_src emacs-lisp
  (setq ag-reuse-buffers t)
#+end_src

** ripgrep

#+begin_src emacs-lisp
  (use-package ripgrep :ensure t)
#+end_src

* Wgrep

#+begin_src emacs-lisp
  (use-package wgrep :ensure t)
  (use-package wgrep-ag :ensure t)
  (require 'wgrep)
  (require 'wgrep-ag)
#+end_src

** Auto save wgrep buffer

#+begin_src emacs-lisp
  (setq wgrep-auto-save-buffer t)
#+end_src

* Magit

#+begin_src emacs-lisp
  (use-package magit :ensure t)
#+end_src

** Keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c g") 'magit-status)
  (global-set-key (kbd "C-c C-g") 'magit-status)
#+end_src

** Full screen magit-status and unfold all sections

#+begin_src emacs-lisp
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows)
    (magit-section-show-level-2-all))
#+end_src

** Restore windows after quitting magit

#+begin_src emacs-lisp
  (defun magit-quit-session ()
    "Restores the previous window configuration and kills the magit buffer"
    (interactive)
    (kill-buffer)
    (jump-to-register :magit-fullscreen))
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
#+end_src

** Some custom variables

#+begin_src emacs-lisp
  (custom-set-variables
   '(git-commit-fill-column 1000)
   '(git-commit-finish-query-functions nil)
   '(git-commit-summary-max-length 1000))
#+end_src

* Docker

#+begin_src emacs-lisp
  (use-package dockerfile-mode :ensure t)
#+end_src

* Editing tweaks

** Delete selection

#+begin_src emacs-lisp
  (delete-selection-mode 1)
#+end_src

** Lines

*** Line numbers

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
#+end_src

**** Toggle absolute and relative line numbers

#+begin_src emacs-lisp
  (defun fdx/toggle-relative-absolute-line-numbers ()
    "Toggle between relative and absolute line numbers for dilplay-line-numbers-mode"
    (interactive)
    (if (eq display-line-numbers-type 'absolute)
        (setq display-line-numbers-type 'relative)
      (setq display-line-numbers-type 'absolute))
    (global-display-line-numbers-mode))
  (global-set-key (kbd "H-9") 'fdx/toggle-relative-absolute-line-numbers)
#+end_src

*** Highlight current line

#+begin_src emacs-lisp
  (global-hl-line-mode 1)
#+end_src

*** Duplicate line

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/duplicate-line()
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (next-line 1)
    (yank))
#+end_src

*** Move lines around

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/move-line-up ()
    "Move up the current line."
    (interactive)
    (transpose-lines 1)
    (forward-line -2)
    (indent-according-to-mode))

  ;;;###autoload
  (defun fdx/move-line-down ()
    "Move down the current line."
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1)
    (indent-according-to-mode))
#+end_src

*** Open lines above and below

Commands for opening a new line above and below the current line

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/open-line-below ()
    "Open an empty line above the current one and move."
    (interactive)
    (move-end-of-line nil)
    (newline-and-indent))

  ;;;###autoload
  (defun fdx/open-line-above ()
    "Open an empty line above the current one and move."
    (interactive)
    (move-beginning-of-line nil)
    (newline-and-indent)
    (forward-line -1)
    (indent-according-to-mode))
#+end_src

Bind them

#+begin_src emacs-lisp
  (global-set-key (kbd "C-<return>") 'fdx/open-line-below)
  (global-set-key (kbd "C-S-<return>") 'fdx/open-line-above)
#+end_src

** Strings

*** Replace tabs with commas

#+begin_src emacs-lisp
  (defun fdx/paste-replacing-tabs-with-commas ()
    (interactive)
    (insert (replace-regexp-in-string "\t" "," (car kill-ring)))
    )
#+end_src

** Dead characters

#+begin_src emacs-lisp
  (require 'iso-transl)
#+end_src

* Files tweaks

** Save place of cursor between sessions

#+begin_src emacs-lisp
  (save-place-mode 1)
#+end_src

** Backup files

Write backup files to own directory

#+begin_src emacs-lisp
  (setq backup-directory-alist
        `(("." . ,(expand-file-name
                   (expand-file-name "~/.emacs.d/backups")))))
#+end_src

Make backups of files, even when they're in version control

#+begin_src emacs-lisp
  (setq vc-make-backup-files t)
  (setq create-lockfiles nil)
#+end_src

** Rename current file

#+begin_src emacs-lisp
  ;; source: http://steve.yegge.googlepages.com/my-dot-emacs-file
  (defun fdx/rename-current-file (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive (list (read-string "sNew name: " (file-name-nondirectory (buffer-file-name)))))
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not filename)
          (message "Buffer '%s' is not visiting a file!" name)
        (if (get-buffer new-name)
            (message "A buffer named '%s' already exists!" new-name)
          (progn
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil))))))
#+end_src

** Delete current file

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/delete-file-and-buffer ()
    "Kill the current buffer and deletes the file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
        (if (vc-backend filename)
            (vc-delete-file filename)
          (progn
            (delete-file filename)
            (message "Deleted file %s" filename)
            (kill-buffer))))))
#+end_src

** Touch current file

#+begin_src emacs-lisp
  (defun fdx/touch-current-file ()
    "updates mtime on the file for the current buffer"
    (interactive)
    (shell-command (concat "touch " (shell-quote-argument (buffer-file-name))))
    (clear-visited-file-modtime))
#+end_src

** Change mode to current file

#+begin_src emacs-lisp
  (defun fdx/chmod-current-file ()
    "updates mtime on the file for the current buffer"
    (interactive)
    (chmod (buffer-file-name) (read-file-modes)))
#+end_src

* YAML

#+begin_src emacs-lisp
  (use-package yaml-mode :ensure t)
#+end_src

#+begin_src emacs-lisp
  (defun fdx/reformat-yaml-file (filename)
    (interactive)
    (compile "yq -Sy < ~/bookmarks.yml")
    )

  (global-set-key (kbd "H-8") (lambda () (interactive) (fdx/reformat-yaml-file (buffer-file-name))))
#+end_src

* Company

#+begin_src emacs-lisp
  (use-package company :ensure t)
#+end_src

* Tabnine

#+begin_src emacs-lisp
  (use-package company-tabnine :ensure t)
#+end_src

** Add to company

#+begin_src emacs-lisp
  (add-to-list 'company-backends #'company-tabnine)
#+end_src

* Columns

** Show column numbers

#+begin_src emacs-lisp
  (column-number-mode)
#+end_src

* Treesitter

#+begin_src emacs-lisp
  (use-package tree-sitter :ensure t)
  (use-package tree-sitter-langs :ensure t)
#+end_src

** Enable for all modes

#+begin_src emacs-lisp
  (global-tree-sitter-mode)
#+end_src

* LSP

#+begin_src emacs-lisp
  (use-package lsp-mode :ensure t)
#+end_src

** Languages

*** Ruby

#+begin_src emacs-lisp
  (add-hook 'ruby-ts-mode-hook #'lsp)
  (add-hook 'ruby-mode-hook #'lsp)
#+end_src

#+begin_src emacs-lisp
  (setq lsp-solargraph-autoformat t)
#+end_src

* Hydra

#+begin_src emacs-lisp
  (use-package hydra :ensure t)
#+end_src

* Ruby

** Ruby TreeSitter mode

#+begin_src emacs-lisp
  (use-package ruby-ts-mode :ensure t )
#+end_src

** Local keybindings

#+begin_src emacs-lisp
  (with-eval-after-load "ruby-ts-mode"
    (define-key ruby-ts-mode-map (kbd "H-;") 'seeing-is-believing-mark-current-line-for-xmpfilter)
    (define-key ruby-ts-mode-map (kbd "H-=") 'lsp-format-buffer)
    (define-key ruby-ts-mode-map (kbd "H-+") 'fdx/reindent-buffer)
    (define-key ruby-ts-mode-map (kbd "C-c C-c") 'seeing-is-believing-run-as-xmpfilter)
    )
#+end_src

** RVM

#+begin_src emacs-lisp
  (use-package rvm
    :ensure t
    :config
    (rvm-use-default))
#+end_src

** Seeing is believing

#+begin_src emacs-lisp
  (use-package seeing-is-believing :ensure t)
#+end_src

** Rspec

#+begin_src emacs-lisp
  (use-package rspec-mode
    :bind (
           ("H-r r"   . rspec-rerun)
           ("H-r t"   . rspec-toggle-spec-and-target)
           ("H-r v"   . rspec-verify)
           ("H-r a"   . rspec-verify-all)
           ("H-r H-a" . rspec-verify-all)
           ("H-r s"   . rspec-verify-single)
           ("H-r f"   . rspec-run-last-failed)
           )
    :ensure t)
#+end_src

** Parens

#+begin_src emacs-lisp
  (use-package ruby-electric :ensure t)

  (require 'ruby-electric)
  (electric-pair-mode t)
#+end_src

** Ruby refactor

#+begin_src emacs-lisp
  (use-package ruby-refactor
    :ensure t
    :hook (ruby-ts-mode . ruby-refactor-mode-launch)
    )

  ;; (eval-after-load 'ruby-refactor
  ;;   '(progn
  ;;      (define-key ruby-refactor-mode-map (kbd "C-c r e") 'ruby-refactor-extract-to-method)
  ;;      (define-key ruby-refactor-mode-map (kbd "C-c r l") 'ruby-refactor-extract-to-let)
  ;;      (define-key ruby-refactor-mode-map (kbd "C-c r v") 'ruby-refactor-extract-local-variable)
  ;;      (define-key ruby-refactor-mode-map (kbd "C-c r c") 'ruby-refactor-convert-post-conditional)))
#+end_src

** Ruby Runner Mode

#+begin_src emacs-lisp
  (load (expand-file-name "~/.emacs.d/fdx/vendor/ruby-runner-mode/ruby-runner-mode.el") t)
#+end_src

*** Functions

#+begin_src emacs-lisp
  (defun rrr/rubocop ()
    "Run Rubocop using Ruby Runner mode"
    (interactive)
    (rr/compile "bundle exec rubocop"))

  (defun rrr/rubocop-autocorrect ()
    "Run Rubocop autocorrect using Ruby Runner mode"
    (interactive)
    (rr/compile "bundle exec rubocop --autocorrect; bundle exec rubocop"))

  (defun fdx/run-erblint ()
    "Bind an interactively specified key to a new command."
    (interactive)
    (compile "erblint \"**/*.erb\""))

  (defun fdx/run-erblint-autocorrect-on-current-file ()
    "Bind an interactively specified key to a new command."
    (interactive)
    (compile (concat
              "erblint --autocorrect "
              (file-relative-name (buffer-file-name) "/home/fedex/code/conquered_self"))
             ))

  (defun rrr/cucumber ()
    "Run Rubocop using Ruby Runner mode"
    (interactive)
    (rr/compile "bundle exec cucumber"))
#+end_src

*** Functions and Keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "H-i i") 'rr/rerun)

  (which-key-add-key-based-replacements "H-i r" "RSpec")
  (rr/global-set-key "H-i r a" "bundle exec rspec")
  ;; (rr/global-set-key-current-file "H-i r v" "rspec")
  ;; (rr/global-set-key-current-file "H-6" "rspec")

  (which-key-add-key-based-replacements "H-i u" "Rubocop")
  (rr/global-set-key "H-i u u" "bundle exec rubocop")
  (rr/global-set-key "H-i u U" "bundle exec rubocop --autocorrect; bundle exec rubocop")
  (rr/global-set-key "H-i u A" "bundle exec rubocop --autocorrect-all; bundle exec rubocop")
  (rr/global-set-key "H-i u T" "bundle exec rubocop --regenerate-todo")
  (global-set-key (kbd "H-i u c") (lambda ()(interactive) (compile "ruboclean")))
  (which-key-add-key-based-replacements "H-i u c" "Ruboclean")

  ;; (rr/global-set-key-single "H-i u s" "bundle exec rubocop")
  ;; (rr/global-set-key-single "H-i u s" "bundle exec rubocop -a")

  (which-key-add-key-based-replacements "H-i b" "Bundle")
  (rr/global-set-key-multiple "H-i b b" '("bundle install" "pessimize -c patch --no-backup" "bundle install"))
  (rr/global-set-key-multiple "H-i b B" '("bundle update" "pessimize -c patch --no-backup" "bundle install"))

  ;; (rr/global-set-key "H-i r" "ruby" (buffer-file-name)) <- this doesn't work

  (which-key-add-key-based-replacements "H-i c" "Cucumber")
  (rr/global-set-key "H-i c" "bundle exec cucumber")

#+end_src

* web-mode

#+begin_src emacs-lisp
  (use-package web-mode :ensure t)
#+end_src

** Local keybindings

#+begin_src emacs-lisp
  (with-eval-after-load "web-mode"
    (define-key web-mode-map (kbd "H-=") (lambda ()
                                           (interactive)
                                           (fdx/reindent-buffer)
                                           (fdx/run-erblint-autocorrect-on-current-file)))
    )
#+end_src

* rhtml-mode

#+begin_src emacs-lisp
  (use-package rhtml-mode :ensure t)
#+end_src

* Emmet mode

#+begin_src emacs-lisp
  (use-package emmet-mode :ensure t)
#+end_src

* Slim

#+begin_src emacs-lisp
  (use-package slim-mode
    :bind (
           ("H-h" . emmet-expand-yas)
           ("H-=" . fdx/reindent-buffer)
           )
    :ensure t)
#+end_src

* Multiple cursors

#+begin_src emacs-lisp
  (use-package multiple-cursors :ensure t)

  (require 'multiple-cursors)
#+end_src

** Keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-a") 'mc/edit-lines)
  (global-set-key (kbd "C-M-<return>") 'mc/edit-lines)

  (global-set-key (kbd "C-c a") 'mc/mark-all-like-this)

  (global-set-key (kbd "H-.") 'mc/mark-next-like-this)
  (global-set-key (kbd "H-,") 'mc/mark-previous-like-this)
  (global-set-key (kbd "H->") 'mc/skip-to-next-like-this)

  (global-set-key (kbd "H-p") 'mc/insert-numbers)
#+end_src

* Expand region

#+begin_src emacs-lisp
  (use-package expand-region :ensure t)

  (require 'expand-region)

  (setq expand-region-fast-keys-enabled nil)
#+end_src

** Keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "H-e") 'er/expand-region)
  (global-set-key (kbd "C-c e") 'er/expand-region)
#+end_src

* Compile

#+begin_src emacs-lisp
  (use-package compile
    :ensure nil
    :custom
    ;; (compilation-scroll-output 'first-error)
    (compilation-always-kill t)
    (compilation-max-output-line-length nil)
    :hook (compilation-mode . hl-line-mode))
#+end_src

* Compilation

** Keybindings

#+begin_src emacs-lisp
  (global-set-key (kbd "H-m") 'recompile)
  (global-set-key (kbd "H-b") 'compile)
#+end_src

** Compile (run) current file

#+begin_src emacs-lisp
  (defun fdx/run-current-file ()
    (interactive)
    (save-buffer)
    (compile (buffer-file-name)))
#+end_src

** Compile (run) current Ruby file

#+begin_src emacs-lisp
  (defun fdx/run-current-ruby-file ()
    (interactive)
    (save-buffer)
    (compile (concat "ruby " (buffer-file-name))))
#+end_src

** Compile (run) current Ruby file with docker-compose

#+begin_src emacs-lisp
  (defun fdx/run-current-ruby-file--docker-compose ()
    (interactive)
    (save-buffer)
    (compile (concat "docker-compose run --rm web bundle exec ruby /app/bin/" (file-name-nondirectory (buffer-file-name)))))
#+end_src

** Compile (run) current Python file

#+begin_src emacs-lisp
  (defun fdx/run-current-python-file--docker ()
    (interactive)
    (save-buffer)
    (compile (concat "docker run -v .:/app python:3.9 python /app/" (file-name-nondirectory (buffer-file-name)))))
#+end_src

#+begin_src emacs-lisp
  (defun fdx/run-current-python-file--docker-compose ()
    (interactive)
    (compile
     (concat "docker-compose run --rm app python "
             (replace-regexp-in-string
              "/home/fedex/code/ai-ruby/harvard-python-code"
              "/app"
              (buffer-file-name)))))
#+end_src

* Colors in compilation buffer

** Display ANSI colors on current buffer

#+begin_src emacs-lisp
  (require 'ansi-color)
  (defun fdx/display-ansi-colors ()
    (interactive)
    (ansi-color-apply-on-region (point-min) (point-max)))
#+end_src

** Display ANSI colors on compilation buffer

#+begin_src emacs-lisp
  (require 'ansi-color)
  (defun endless/colorize-compilation ()
    "Colorize from 'compilation-filter-start' to 'point'."
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region
       compilation-filter-start (point))))

  (add-hook 'compilation-filter-hook
            'endless/colorize-compilation)
#+end_src

** Fix ANSII colors

#+begin_src emacs-lisp
  (use-package xterm-color :ensure t)
  (require 'xterm-color)
  (setq compilation-environment '("TERM=xterm-256color"))
  (defun my/advice-compilation-filter (f proc string)
    (funcall f proc (xterm-color-filter string)))
  (advice-add 'compilation-filter :around #'my/advice-compilation-filter)
#+end_src

** Set TERM environment variable to show colors on terminal

#+begin_src emacs-lisp
  (setenv "TERM" "256colors")
#+end_src

* Reload browser

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/reload-browser (&optional by)
    "Reload web browser"
    (interactive)
    (save-some-buffers)
    (save-window-excursion (async-shell-command "~/bin/reload-browser"))
    ;; (kill-buffer "*Async Shell Command*")
    )

  ;;;###autoload
  (defun fdx/send-up-enter-to-current-window (&optional list)
    "Reload web browser"
    (interactive)
    (save-some-buffers)
    (save-window-excursion (async-shell-command "~/bin/send_to_current_window \"<Up>\" \"<Return>\""))
    ;; (kill-buffer "*Async Shell Command*")
    )

  ;;;###autoload
  (defun fdx/set-current-window (&optional by)
    "Reload web browser"
    (interactive)
    (save-some-buffers)
    (save-window-excursion (async-shell-command "~/bin/set_current_window"))
    ;; (kill-buffer "*Async Shell Command*")
    )

  ;;;###autoload
  (defun fdx/save-and-reload-browser (&optional by)
    "Save current buffer and reload web browser"
    (interactive)
    (save-buffer)
    (fdx/reload-browser)
    )

  ;;;###autoload
  (defun fdx/save-and-reload-browser-with-delay (&optional by)
    "Save current buffer and reload web browser"
    (interactive)
    (save-buffer)
    (sleep-for 0.3)
    (fdx/reload-browser)
    )

  ;;;###autoload
  (defun fdx/save-recompile-and-reload-browser-with-delay (&optional by)
    "Save current buffer and reload web browser"
    (interactive)
    (save-buffer)
    (recompile)
    (sleep-for 2.5)
    (fdx/reload-browser)
    )
#+end_src

* Ruby Framework generator

** Just Ruby

#+begin_src emacs-lisp
  (defun fdx/generate_ruby_framework_project (project-name)
    "Reload web browser"
    (interactive "sProject name: ")
    (message (concat "Generating project " project-name))
    (save-some-buffers)
    (save-window-excursion (async-shell-command (concat "~/bin/ruby_framework " project-name)))
    )
#+end_src

** Web with Roda

#+begin_src emacs-lisp
  (defun fdx/generate_ruby_framework_web_project (project-name)
    "Reload web browser"
    (interactive "sProject name: ")
    (message (concat "Generating project " project-name))
    (save-some-buffers)
    (save-window-excursion (async-shell-command (concat "~/bin/ruby_framework_web " project-name)))
    )
#+end_src

** WIP implementation of the framework

#+begin_src emacs-lisp
  (defun fdx/generate_ruby_framework_project_wip (project-name)
    "Reload web browser"
    (interactive "sProject name: ")
    (message (concat "Generating project " project-name))
    (save-some-buffers)
    (save-window-excursion (async-shell-command (concat "~/bin/ruby_framework_wip " project-name)))
    )
#+end_src

* Centered cursor mode

#+begin_src emacs-lisp
  (use-package centered-cursor-mode :ensure t)
#+end_src

* Undo tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+end_src

** Prevent undo tree files from polluting your git repo

#+begin_src emacs-lisp
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
#+end_src

* String inflections

#+begin_src emacs-lisp
  (use-package string-inflection :ensure t)
#+end_src

** Global keybindings

#+begin_src ruby
  (global-set-key (kbd "H-o") 'string-inflection-all-cycle)
#+end_src

* Docker

** Docker

#+begin_src emacs-lisp
  (use-package docker :ensure t)
#+end_src

** Tramp

#+begin_src emacs-lisp
  ;; (use-package docker-tramp :ensure t)    ;
#+end_src

* Copy current file name to clipboard

#+begin_src emacs-lisp
  ;;;###autoload
  (defun fdx/file-name-to-clipboard ()
    "Copy current file name to clipboard"
    (interactive)
    (if (buffer-file-name)
        (progn
          (kill-new (buffer-file-name))
          (message (buffer-file-name))
          )
      (message "Current buffer is not visiting a saved file")
      )
    )
#+end_src

* Edit as sudo

#+begin_src emacs-lisp
  (use-package sudo-edit :ensure t)
#+end_src

* Nix

#+begin_src emacs-lisp
  (use-package nix-mode :ensure t)
#+end_src


* File extensions

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.org\\'"      . org-mode))

  (add-to-list 'auto-mode-alist '("Gemfile\\'"     . ruby-ts-mode))
  (add-to-list 'auto-mode-alist '("Guardfile\\'"   . ruby-ts-mode))
  (add-to-list 'auto-mode-alist '("Rakefile\\'"    . ruby-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.env"         . ruby-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.gemspec\\'"  . ruby-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.rake\\'"     . ruby-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.rb\\'"       . ruby-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.ru\\'"       . ruby-ts-mode))

  (add-to-list 'auto-mode-alist '("\\.html\\'"     . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'"      . rhtml-mode))

  (add-to-list 'auto-mode-alist '("\\Dockerfile\'" . dockerfile-mode))

  (add-to-list 'auto-mode-alist '("Makefile\\..*" . makefile-mode))

  (add-to-list 'auto-mode-alist '("\\.feature\\'" . feature-mode))

  (add-to-list 'auto-mode-alist '("\\.nix\\'"      . nix-mode))
#+end_src
